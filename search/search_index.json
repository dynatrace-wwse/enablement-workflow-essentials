{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"1. About","text":"<p>This Codespace leverages the Dynatrace Enablement Framework, providing a robust and flexible development environment. Key features include:</p> <ul> <li>Seamless operation within GitHub Codespaces, as a remote container, or locally via Docker.</li> <li>Cross-compilation support for both AMD and ARM architectures, ensuring broad compatibility.</li> <li>Adherence to industry standards and best practices to optimize the developer experience.</li> </ul> <p>To learn more about the Dynatrace Enablement Framework and how it can enhance your development workflow, please refer to the official documentation</p>"},{"location":"#enablement-workflow-essentials","title":"Enablement Workflow Essentials","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"#lab-overview","title":"Lab Overview","text":"<p>During this hands-on training, you will learn the foundation to be able to automate any relevant use case within Dynatrace using Workflow automations.</p> <p>Lab tasks:</p> <ol> <li> <p>Parameters and Task Results</p> <ul> <li>Parameter Task \u2013 define parameters/variables that will be used by subsequent tasks</li> <li>Parameter Task Output \u2013 return parameters for subsequent tasks</li> <li>Accessing Parameter Task Results \u2013 access the parameters from result of the task</li> </ul> </li> <li> <p>Fetch API</p> <ul> <li>HTTP GET (Dynatrace Status.io) \u2013 bring external data into Dynatrace workflows</li> <li>HTTP POST (Webhook.Site) \u2013 send data to external systems from Dynatrace workflows</li> </ul> </li> <li> <p>Looping Tasks</p> <ul> <li>DQL Query \u2013 execute a DQL query that returns multiple records/rows</li> <li>Looping Over Results \u2013 perform logic against each DQL record/row</li> </ul> </li> <li> <p>Credential Vault</p> <ul> <li>Access an API token from the Credential Vault using the Dynatrace SDK</li> </ul> </li> <li> <p>Metric Ingest</p> <ul> <li>Retrieve data from an external system using HTTP GET</li> <li>Ingest retrieved data point using the Dynatrace API with API token (not optimal)</li> <li>Ingest retrieved data point using the Dynatrace SDK (optimal)</li> </ul> </li> <li> <p>Event Ingest</p> <ul> <li>Query ingested metric data point using DQL</li> <li>Evaluate metric value against a threshold</li> <li>If the threshold is breached, generate an event using the Dynatrace SDK</li> </ul> </li> <li> <p>Event Trigger</p> <ul> <li>Trigger Workflow when a Davis problem event is detected</li> <li>Events are filtered on the type of event, based on the previous exercise</li> </ul> </li> <li> <p>Slack for Workflows</p> <ul> <li>Third party integration is typically accomplished with Workflow Apps</li> <li>The Slack for Workflows App provides an easy-to-use mechanism for sending messages to a Slack environment containing the data and context from Dynatrace</li> <li>Leverage Jinja expressions to access Workflow action results and implement logic</li> </ul> </li> <li> <p>Code Snippets</p> <ul> <li>Review code snippets to re-use with Workflows in your custom use cases</li> </ul> </li> <li> <p>Clean up</p> </li> </ol>"},{"location":"#technical-specification","title":"Technical Specification","text":""},{"location":"#technologies-used","title":"Technologies Used","text":"<ul> <li>Dynatrace</li> <li>Slack</li> <li>Webhook.site</li> </ul>"},{"location":"#reference-architecture","title":"Reference Architecture","text":"<p>N/A</p>"},{"location":"#continue","title":"Continue","text":"<p>In the next section, we'll review the prerequisites for this lab.</p> <ul> <li>Continue to getting started</li> </ul>"},{"location":"03_workflow_essentials/","title":"3. Workflow Essentials","text":""},{"location":"03_workflow_essentials/#workflow-essentials","title":"Workflow Essentials","text":"<p>Goal: Utilize essential Workflow techniques applicable to most use cases.</p> <ul> <li>Parameters and Task Results<ul> <li>Parameter Task \u2013 define parameters/variables that will be used by subsequent tasks</li> <li>Parameter Task Output \u2013 return parameters for subsequent tasks</li> <li>Accessing Parameter Task Results \u2013 access the parameters from result of the task</li> </ul> </li> <li>Fetch API<ul> <li>HTTP GET  (Dynatrace Status.io) \u2013 bring external data into Dynatrace workflows</li> <li>HTTP POST  (Webhook.Site) \u2013 send data to external systems from Dynatrace workflows</li> </ul> </li> <li>Looping Tasks<ul> <li>DQL Query \u2013 execute a DQL query that returns multiple records/rows</li> <li>Looping Over Results \u2013 perform logic against each DQL record/row</li> </ul> </li> </ul>"},{"location":"03_workflow_essentials/#parameters-and-task-results","title":"Parameters and Task Results","text":"<p>Begin by creating a new Workflow in the Workflows App within your Dynatrace environment.</p> <p>Remember to save progress often!</p> <p>Select a trigger: choose <code>On demand trigger</code></p> <p></p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p></p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p></p>"},{"location":"03_workflow_essentials/#js_set_parameters","title":"<code>js_set_parameters</code>","text":"<p>Name: <pre><code>js_set_parameters\n</code></pre> Description: <pre><code>Set the parameters for this workflow\n</code></pre></p> <p>This will be the task/action that defines the parameters/variables that will be used by subsequent tasks and returns them in the result.  By setting the parameters as nested attribute key:value pairs within a single variable, as additional parameters are needed they can easily be added without modifying any other code.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>:</p> <pre><code>export default async function () {\n\n  let PARAMETERS = {\n\n    // INITIALS - the initials of the user for this lab\n    INITIALS: \"\", // i.e. INITIALS: \"TPC\"; the intials of the user for this lab are TPC\n\n    // LOCATION - the city and country of the user for this lab\n    LOCATION: \"\", // i.e. LOCATION: \"Dallas, United States\";\n\n    // TENURE - the number of years of tenure of the user for this lab\n    TENURE: ##, // i.e. TENURE: 14; the user for this lab has 14 years of tenure\n\n    // STATUS_URL - the URL of the dynatrace status.io API\n    STATUS_URL: \"https://api.status.io/1.0/status/546d8cb6af8407b6730000cb\", // i.e. STATUS_URL: \"https://api.status.io/1.0/status/546d8cb6af8407b6730000cb\"\n\n    // WEBHOOK_URL- the URL of the webhook.site unique endpoint\n    WEBHOOK_URL: \"\", // i.e. WEBHOOK_URL: \"https://webhook.site/18637ec8-fcf9-43ec-86bf-993626982c6c\"\n\n  }\n\n  return PARAMETERS;\n}\n</code></pre> <p>Set the value of the missing variables:</p> <ul> <li>INITIALS: your initials</li> <li>LOCATION: your location</li> <li>TENURE: the number of years you've been with the company</li> <li>WEBHOOK_URL:<ul> <li>Navigate in your incognito browser window to https://webhook.site/ and copy your unique URL</li> <li>The unique URL is located at the top of the page, not in your browser's address bar</li> </ul> </li> </ul> <p></p>"},{"location":"03_workflow_essentials/#js_output_parameters","title":"<code>js_output_parameters</code>","text":"<p>Name: <pre><code>js_output_parameters\n</code></pre> Description: <pre><code>Output the parameters from the previous task\n</code></pre></p> <p>This will be the task/action that accesses the parameters from the previous tasks results.  This will demonstrate how to do this within JS code.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>import { execution } from '@dynatrace-sdk/automation-utils';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\n\nexport default async function ({ execution_id }) {\n\n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n\n  // log the parameters\n  console.log(parameters);\n\n  // declare new variables to easily access the parameters within this task\n  const INITIALS = parameters['INITIALS'];\n  const LOCATION = parameters['LOCATION'];\n  const TENURE = parameters['TENURE'];\n\n  // return a string that contains the parameters\n  return \"The lab user \" + INITIALS + \", is located in \" + LOCATION + \".  They have \" + TENURE + \" years of tenure.\";\n\n}\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_set_parameters</code> is <code>success</code></p> <p></p> <p>Run the workflow and validate the results</p> <p></p>"},{"location":"03_workflow_essentials/#fetch-api","title":"Fetch API","text":""},{"location":"03_workflow_essentials/#js_fetch_status_io","title":"<code>js_fetch_status_io</code>","text":"<p>Name: <pre><code>js_fetch_status_io\n</code></pre> Description: <pre><code>Read dynatrace status.io using fetch api\n</code></pre></p> <p>This will be the task/action that uses the <code>fetch()</code> api to make an HTTP call to the Dynatrace status.io api.  This will demonstrate how to make HTTP calls using JS code, in order to bring in external data.</p> <p>Locate the <code>js_set_parameters</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>import { execution } from '@dynatrace-sdk/automation-utils';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\n\nexport default async function ({ execution_id }) {\n\n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // STATUS_URL\n  const STATUS_URL = parameters['STATUS_URL'];\n\n  // set the fetch() api parameters [method, headers, body]\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const options = {\n    method: \"GET\",\n    headers: {\n      'accept': \"application/json\",\n    }\n  };\n\n  // execute the fetch() api call\n  // set the url parameter equal to the status.io url parameter\n  const url = STATUS_URL;\n  // make the fetch call, passing the url and options, capture the response\n  const response = await fetch(url,options);\n  // parse the json response as a new variable\n  const response_json = await response.json();\n  // return the json response\n  return response_json;\n}\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_set_parameters</code> is <code>success</code></p> <p>Additionally, we only want this task to run if the <code>STATUS_URL</code> parameter is defined in the previous task.  We can access the result using a Jinja expression: <pre><code>1. {{ result(\"task_name\") }}\n2. {{ result(\"task_name\")['result_attribute_name'] }}\n3. {{ result(\"task_name\")['result_attribute_name'] condition expression }}\n</code></pre></p> <p>Expression Reference Documentation</p> <p>Set the <code>And custom condition was met</code>: <pre><code>{{ result(\"js_set_parameters\")['STATUS_URL'] is defined }}\n</code></pre></p> <p></p>"},{"location":"03_workflow_essentials/#js_fetch_webhook_site","title":"<code>js_fetch_webhook_site</code>","text":"<p>Name: <pre><code>js_fetch_webhook_site\n</code></pre> Description: <pre><code>Send json content to webhook.site using fetch api\n</code></pre></p> <p>This will be the task/action that uses the <code>fetch()</code> api to make an HTTP call to webhook.site, a free webhook testing tool.  This will demonstrate how to make HTTP calls using JS code, in order to send data from workflows to external systems.</p> <p>Locate the <code>js_fetch_status_io</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>import { execution } from '@dynatrace-sdk/automation-utils';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\nconst FETCH_STATUS_TASK = 'js_fetch_status_io';\n\nexport default async function ({ execution_id }) {\n\n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // WEBHOOK_URL\n  const WEBHOOK_URL = parameters['WEBHOOK_URL'];\n\n  // get results from previous task\n  // fetch status task result\n  const status_result = await ex.result(FETCH_STATUS_TASK);\n\n  // set the fetch() api parameters [method, headers, body]\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const options = {\n    method: \"POST\",\n    headers: {\n      'content-type': \"application/json\",\n    },\n    body: JSON.stringify(status_result)\n  };\n\n  // execute the fetch() api call\n  // set the url parameter equal to the status.io url parameter\n  const url = WEBHOOK_URL;\n  // make the fetch call, passing the url and options, capture the response\n  const response = await fetch(url,options);\n  // capture the response code\n  const response_status = response.status\n\n  return response_status;\n}\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_fetch_status_io</code> is <code>success</code></p> <p>Additionally, we only want this task to run if the <code>result</code> attribute is defined in the previous task.  We can access the result using a Jinja expression:</p> <p>Set the <code>And custom condition was met</code>: <pre><code>{{ result(\"js_fetch_status_io\")['result'] is defined }}\n</code></pre></p> <p></p> <p>Run the workflow and validate the results</p> <p></p>"},{"location":"03_workflow_essentials/#looping-tasks","title":"Looping Tasks","text":""},{"location":"03_workflow_essentials/#dql_query_bizevents","title":"<code>dql_query_bizevents</code>","text":"<p>Name: <pre><code>dql_query_bizevents\n</code></pre> Description: <pre><code>Query bizevents\n</code></pre></p> <p>This will be the task/action that queries bizevents that are being generated from the data generator workflow.  This will demonstrate how to query data from Dynatrace (Grail) and use the data/results in subsequent tasks.</p> <p>Locate the <code>js_fetch_status_io</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Execute DQL Query</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Paste the following DQL query into the action <code>Input</code>: <pre><code>fetch bizevents, from: now()-2h\n| filter event.provider == \"workflow.essentials.withdraw-processing\"\n| summarize count = count(), by: {step = event.type}\n| sort step asc\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_fetch_status_io</code> is <code>success</code></p> <p></p>"},{"location":"03_workflow_essentials/#js_loop_over_results","title":"<code>js_loop_over_results</code>","text":"<p>Name: <pre><code>js_loop_over_results\n</code></pre> Description: <pre><code>Execute task for each loop item, bizevent record\n</code></pre></p> <p>This will be the task/action that iterates over the results of a DQL query and performs desired activities.  If a result record matches a condition, it will use fetch() api to send data to webhook.site.</p> <p>Locate the <code>dql_query_bizevents</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>import { execution, actionExecution } from '@dynatrace-sdk/automation-utils';\nimport { getCurrentUserDetails,getEnvironmentId,getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\n\nexport default async function ({ execution_id, action_execution_id }) {\n\n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // WEBHOOK_URL\n  const WEBHOOK_URL = parameters['WEBHOOK_URL'];\n\n  // get the loop item for the action execution\n  const actionEx = await actionExecution(action_execution_id);\n  const record = actionEx.loopItem['item'];\n  // log the loop item record\n  console.log(JSON.stringify(record));\n  // create variables for the step and count attributes within the record\n  const step = record['step'];\n  const count = record['count'];\n\n  // check if step is \"06.funds.received\", send webhook with details\n  if(step == \"06.funds.received\") {\n\n    // get a timestamp to send with the payload\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date\n    const timestamp = new Date();\n\n    // Environment ID\n    const environment_id = getEnvironmentId();\n\n    // Workflow execution user details\n    const user_details = getCurrentUserDetails();\n    const user_name = user_details['name']; // get the user name\n\n    // set the fetch() api parameters [method, headers, body]\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    const options = {\n      method: \"POST\",\n      headers: {\n        'content-type': \"application/json\",\n      },\n      body: JSON.stringify({\n        timestamp: timestamp.toISOString(), // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n        step: step,\n        count: count,\n        environment: environment_id,\n        user: user_name\n      })\n    };\n\n    // execute the fetch() api call\n    // set the url parameter equal to the status.io url parameter\n    const url = WEBHOOK_URL;\n    // make the fetch call, passing the url and options, capture the response\n    const response = await fetch(url,options);\n    // capture the response code\n    const response_status = response.status\n\n    return { step: step, count: count, response: response_status };\n  }\n\n  // return the step and count attributes\n  return { step: step, count: count };\n}\n</code></pre></p> <p></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>dql_query_bizevents</code> is <code>success</code></p> <p>Additionally, we only want this task to run if the result of the previous task has a <code>records</code> array with a <code>length &gt; 0</code>.</p> <p>Set the <code>And custom condition was met</code>: <pre><code>{{ result(\"dql_query_bizevents\").records | length &gt; 0 }}\n</code></pre> note <code>result(\"dql_query_bizevents\").records</code> is the same as <code>result(\"dql_query_bizevents\")['records']</code></p> <p>Finally, we want this task to execute as a loop.  This works by providing a <code>List</code> which is an array/list of data you want to iterate over and perform the task for each element/index.  You can provide data from a previous task using a Jinja expression.  You can access element/index through the provided <code>Item variable name</code>, either from JS code or Jinja expression.  Additionally, you can specify loop concurrency to increase parallel operations.</p> <p>Click on the task's <code>Options</code> tab.  Toggle on <code>Loop task</code> setting.</p> <p>Set the <code>Item variable name</code>: <pre><code>item\n</code></pre></p> <p>Set the <code>List</code>: <pre><code>{{ result(\"dql_query_bizevents\").records }}\n</code></pre></p> <p></p> <p>The loop item is access in our JS code with the following snippet: <pre><code>// import the required package\nimport { actionExecution } from '@dynatrace-sdk/automation-utils';\n// declare function\nexport default async function ({ execution_id, action_execution_id }) {\n// get the loop item for the action execution\nconst actionEx = await actionExecution(action_execution_id);\nconst record = actionEx.loopItem['item'];\n// we can now use the contents of record\nconsole.log(record); // for example\n// end function\n}\n</code></pre></p> <p>Run the workflow and validate the results</p> <p></p>"},{"location":"03_workflow_essentials/#continue","title":"Continue","text":"<p>In the next section, we'll learn to ingest data and create alerts.</p> <ul> <li>Continue to Ingest and Alert</li> </ul>"},{"location":"04_ingest_and_alert/","title":"4. Ingest and Alert","text":""},{"location":"04_ingest_and_alert/#ingest-and-alert","title":"Ingest and Alert","text":"<p>Goal: Retrieve data from an external system and ingest it as a metric.  If the value crosses a configured threshold, then generate an event/alert.</p> <ul> <li>Credential Vault<ul> <li>Access an API token from the Credential Vault using the Dynatrace SDK</li> </ul> </li> <li>Metric Ingest<ul> <li>Retrieve data from an external system using HTTP GET</li> <li>Ingest retrieved data point using the Dynatrace API with API token (not optimal)</li> <li>Ingest retrieved data point using the Dynatrace SDK (optimal)</li> </ul> </li> <li>Event Ingest<ul> <li>Query ingested metric data point using DQL</li> <li>Evaluate metric value against a threshold</li> <li>If the threshold is breached, generate an event using the Dynatrace SDK</li> </ul> </li> </ul>"},{"location":"04_ingest_and_alert/#set-workflow-parameters","title":"Set Workflow Parameters","text":"<p>Begin by creating a new Workflow in the Workflows App within your Dynatrace environment.</p> <p>Remember to save progress often!</p> <p>Select a trigger: choose <code>On demand trigger</code></p> <p></p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p></p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p></p>"},{"location":"04_ingest_and_alert/#js_set_parameters","title":"<code>js_set_parameters</code>","text":"<p>Name: <pre><code>js_set_parameters\n</code></pre> Description: <pre><code>Set the parameters for this workflow\n</code></pre></p> <p>This will be the task/action that defines the parameters/variables that will be used by subsequent tasks and returns them in the result.  By setting the parameters as nested attribute key:value pairs within a single variable, as additional parameters are needed they can easily be added without modifying any other code.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>export default async function () {\n\n  let PARAMETERS = {\n\n    // EASYTRAVEL_URL - the URL to the easytravel rest API to search for journeys and receive JSON payload\n    EASYTRAVEL_URL: \"https://raw.githubusercontent.com/dynatrace-wwse/enablement-workflow-essentials/refs/heads/main/assets/app-data/easytravel_journey.json\", // i.e. EASYTRAVEL_URL: \"https://raw.githubusercontent.com/dynatrace-wwse/enablement-workflow-essentials/refs/heads/main/assets/app-data/easytravel_journey.json\"\n\n    // METRIC - the unique metric id to ingest a data point for the easytravel journey amount\n    METRIC: \"custom.workflow_essentials.easytravel.journey_amount\", // i.e. METRIC: \"custom.workflow_essentials.easytravel.journey_amount\"\n\n    // CREDENTIAL - the credential vault entity ID that holds the Dynatrace API token value with metrics.ingest scope\n    CREDENTIAL: \"\", // i.e. CREDENTIAL: \"CREDENTIALS_VAULT-123ABCF8F36FD\"\n\n    // INGEST_URL - the URL of the dynatrace metric ingest API endpoint\n    INGEST_URL: \"https://&lt;tenant-id&gt;.live.dynatrace.com/api/v2/metrics/ingest\", // i.e. INGEST_URL: \"https://abc123.live.dynatrace.com/api/v2/metrics/ingest\"\n\n    // THRESHOLD - the threshold amount to trigger an alert event\n    THRESHOLD: 500, // i.e. THRESHOLD: 500; trigger an alert event if the average journey amount is above 500.00\n\n  }\n\n  return PARAMETERS;\n}\n</code></pre></p> <p>Set the value of the missing variables:</p> <ul> <li>CREDENTIAL:<ul> <li>Use the credential vault entry ID from the Workflow Essentials - Config Generator workflow execution</li> </ul> </li> <li>INGEST_URL:<ul> <li>Replace <code>&lt;tenant-id&gt;</code> with your Dynatrace environment ID, i.e. <code>abc123</code></li> </ul> </li> </ul> <p></p>"},{"location":"04_ingest_and_alert/#query-external-data","title":"Query External Data","text":""},{"location":"04_ingest_and_alert/#http_easytravel_search","title":"<code>http_easytravel_search</code>","text":"<p>Name: <pre><code>http_easytravel_search\n</code></pre> Description: <pre><code>Query external easytravel API for journey data\n</code></pre></p> <p>This will be the task/action that queries external data from an api endpoint that contains our metric data point.</p> <p>Locate the <code>js_set_parameters</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>HTTP Request</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Configure the HTTP Request action <code>Input</code>:</p> <p>Method: <pre><code>GET\n</code></pre></p> <p>URL: <pre><code>{{ result(\"js_set_parameters\")['EASYTRAVEL_URL'] }}\n</code></pre></p> <p>Headers: <pre><code>accept  application/json\n</code></pre></p> <p>Error Handling: <pre><code>Fail on certain HTTP response codes [Enabled]\n</code></pre></p> <p>HTTP error codes: <pre><code>400-599\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_set_parameters</code> is <code>success</code></p> <p>Additionally, we only want this task to run if the <code>EASYTRAVEL_URL</code> parameter is defined in the previous task.  We can access the result using a Jinja expression: <pre><code>1. {{ result(\"task_name\") }}\n2. {{ result(\"task_name\")['result_attribute_name'] }}\n3. {{ result(\"task_name\")['result_attribute_name'] condition expression }}\n</code></pre></p> <p>Expression Reference Documentation</p> <p>Set the <code>And custom condition was met</code>: <pre><code>{{ result(\"js_set_parameters\")['EASYTRAVEL_URL'] is defined }}\n</code></pre></p> <p></p> <p>Run the workflow and validate the results</p> <p></p>"},{"location":"04_ingest_and_alert/#credential-vault-with-dynatrace-sdk","title":"Credential Vault with Dynatrace SDK","text":""},{"location":"04_ingest_and_alert/#js_get_credential","title":"<code>js_get_credential</code>","text":"<p>Name: <pre><code>js_get_credential\n</code></pre> Description: <pre><code>Access API token from the credential vault\n</code></pre></p> <p>This will be the task/action that uses the Dynatrace SDK to retrieve a credential from the vault.  Confidential data and parameters should be stored in the credential vault and not statically defined in the code.</p> <p>Locate the <code>http_easytravel_search</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>import { execution } from '@dynatrace-sdk/automation-utils';\nimport { credentialVaultClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\n\nexport default async function ({ execution_id }) {\n\n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  // CREDENTIAL\n  const CREDENTIAL = parameters['CREDENTIAL'];\n\n  // get the credentials from the credential vault using the SDK\n  // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#getcredentialsdetails\n  const data = (await credentialVaultClient.getCredentialsDetails({id: CREDENTIAL}));\n  const token = data['token'];\n\n  return { token: token };\n}\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>http_easytravel_search</code> is <code>success</code></p> <p>Additionally, we only want this task to run if the <code>status_code</code> is <code>200</code> and the response is not empty in the previous task.</p> <p>Set the <code>And custom condition was met</code>: <pre><code>{{ result(\"http_easytravel_search\")[\"status_code\"] == 200 and result(\"http_easytravel_search\")[\"json\"] | length &gt; 0 }}\n</code></pre></p> <p></p>"},{"location":"04_ingest_and_alert/#metric-ingest-dynatrace-api-with-token","title":"Metric Ingest - Dynatrace API with Token","text":""},{"location":"04_ingest_and_alert/#http_ingest_metric","title":"<code>http_ingest_metric</code>","text":"<p>Name: <pre><code>http_ingest_metric\n</code></pre> Description: <pre><code>Ingest a metric data point using the metric API\n</code></pre></p> <p>This will be the task/action that ingests a metric data point from the previous task using an HTTP call to the metric ingest API with a token from the credential vault.</p> <p>Locate the <code>js_get_credential</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>HTTP Request</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Configure the HTTP Request action <code>Input</code>:</p> <p>Method: <pre><code>POST\n</code></pre></p> <p>URL: <pre><code>{{ result(\"js_set_parameters\")['INGEST_URL'] }}\n</code></pre></p> <p>Payload: <pre><code>{{ result(\"js_set_parameters\")[\"METRIC\"] }},id={{ result(\"http_easytravel_search\")[\"json\"][0][\"id\"] }},destination={{ result(\"http_easytravel_search\")[\"json\"][0][\"destination\"] }} {{ result(\"http_easytravel_search\")[\"json\"][0][\"amount\"] }}\n</code></pre></p> <p>Headers: <pre><code>Content-Type  text/plain\nAuthorization   Api-Token {{ result(\"js_get_credential\")[\"token\"] }}\n</code></pre></p> <p>Error Handling: <pre><code>Fail on certain HTTP response codes [Enabled]\n</code></pre></p> <p>HTTP error codes: <pre><code>400-599\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_get_credential</code> is <code>success</code></p> <p>Additionally, we only want this task to run if the <code>token</code> parameter is defined in the previous task.</p> <p>Set the <code>And custom condition was met</code>: <pre><code>{{ result(\"js_get_credential\")['token'] is defined }}\n</code></pre></p> <p></p> <p>Run the workflow and validate the results</p> <p></p>"},{"location":"04_ingest_and_alert/#metric-ingest-dynatrace-sdk","title":"Metric Ingest - Dynatrace SDK","text":""},{"location":"04_ingest_and_alert/#js_ingest_metric_sdk","title":"<code>js_ingest_metric_sdk</code>","text":"<p>Name: <pre><code>js_ingest_metric_sdk\n</code></pre> Description: <pre><code>Ingest a metric data point using the SDK\n</code></pre></p> <p>This will be the task/action that uses the Dynatrace SDK to ingest a metric data point.  The SDK makes it significantly easier to perform this function than using the API and authorization token.</p> <p>Locate the <code>http_easytravel_search</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>import { execution } from '@dynatrace-sdk/automation-utils';\nimport { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nconst PARAMETERS_TASK = 'js_set_parameters';\nconst SEARCH_TASK = 'http_easytravel_search';\n\nexport default async function ({ execution_id }) {\n\n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  const METRIC = parameters['METRIC'];\n  // previous results\n  const search_results = await ex.result(SEARCH_TASK);\n  const id = search_results['json'][0]['id'];\n  const amount = search_results['json'][0]['amount'];\n  const destination = search_results['json'][0]['destination'];\n\n  // build the line_protocol string to ingest the metric data point\n  const line_protocol = METRIC + ',id=' + id + ',destination=' + destination + ' ' + amount;\n  // (optional) log the line_protocol value\n  console.log(line_protocol);\n  // ingest the metric data point using the SDK\n  // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#ingest-1\n  const data = await metricsClient.ingest({\n    body: line_protocol,\n  });\n\n  return { data: data };\n}\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>http_easytravel_search</code> is <code>success</code></p> <p>Additionally, we only want this task to run if the <code>status_code</code> is <code>200</code> and the response is not empty in the previous task.</p> <p>Set the <code>And custom condition was met</code>: <pre><code>{{ result(\"http_easytravel_search\")[\"status_code\"] == 200 and result(\"http_easytravel_search\")[\"json\"] | length &gt; 0 }}\n</code></pre></p> <p></p> <p>Run the workflow and validate the results</p> <p></p>"},{"location":"04_ingest_and_alert/#event-ingest-dynatrace-sdk","title":"Event Ingest - Dynatrace SDK","text":""},{"location":"04_ingest_and_alert/#js_wait_30_seconds","title":"<code>js_wait_30_seconds</code>","text":"<p>Name: <pre><code>js_wait_30_seconds\n</code></pre> Description: <pre><code>Wait 30 seconds for data to be processed\n</code></pre></p> <p>This will be the task/action that pauses workflow execution for 30 seconds with a timed wait using JS code.  This method can be useful when you need to pause task execution within your JS code task.  Additionally, you can configure any task to wait up to 60 seconds in the <code>Options</code> tab.</p> <p>When data is ingested into the Dynatrace platform, it may not be available immediately.  To avoid a query from returning an empty result set, we'll wait 30 seconds for the data to be processed before continuing.</p> <p>Locate the <code>http_ingest_metric</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p>Set the task name and description respectively.</p> <p>Locate the <code>js_ingest_metric_sdk</code> task.</p> <p>Click and hold the <code>+</code> button, then drag to connect this task to the <code>js_wait_30_seconds</code> task.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>export default async function () {\n\n  const sleep = async (waitTime: number) =&gt;\n  new Promise(resolve =&gt;\n    setTimeout(resolve, waitTime));\n\n  const waitTime = async () =&gt; {\n  // 30,000ms = 30 seconds to sleep\n  await sleep(30000);\n  console.log(\"Finished Waiting\");\n  }\n\n  console.log(\"Waiting 30 Seconds\");\n  waitTime();\n\n}\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_ingest_metric_sdk</code> is <code>success</code> and <code>http_ingest_metric</code> is <code>success</code></p> <p></p>"},{"location":"04_ingest_and_alert/#js_dql_query_alert","title":"<code>js_dql_query_alert</code>","text":"<p>Name: <pre><code>js_dql_query_alert\n</code></pre> Description: <pre><code>Query metric data point and generate an alert via SDK\n</code></pre></p> <p>This will be the task/action that uses the Dynatrace SDK to execute a DQL query to retrieve a metric data point and trigger an alert event if the value crosses a threshold.  Using the Dynatrace SDK is an alternative method for running a DQL query within workflows.  When a Davis problem event is triggered using the Dynatrace SDK within workflows, the event is stored in Grail and the problem is available in the Problems app.</p> <p>Locate the <code>js_wait_30_seconds</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>import { execution } from '@dynatrace-sdk/automation-utils';\nimport { queryExecutionClient } from \"@dynatrace-sdk/client-query\";\nimport { eventsClient, EventIngestEventType } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nconst PARAMETERS_TASK = 'js_set_parameters';\nconst SEARCH_TASK = 'http_easytravel_search';\n\nexport default async function ({ execution_id }) {\n\n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n  const METRIC = parameters['METRIC'];\n  const THRESHOLD = parameters['THRESHOLD'];\n  // previous results\n  const search_results = await ex.result(SEARCH_TASK);\n  const destination = search_results['json'][0]['destination'];\n\n  // build the DQL query for the metric\n  // query the metric value for the last 5 minutes\n  // https://developer.dynatrace.com/develop/sdks/client-query/#queryexecute\n  const timeout = 60;\n  const query = 'timeseries journey_amount = avg(' + METRIC + '), by: {destination}, from: now()-5m\\\n                  | filter destination == \"' + destination + '\"\\\n                  | summarize avg_amount = avg(arrayAvg(journey_amount))';\n\n  const query_response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  // check if the query result is empty (unexpectedly)\n  if(query_response.result.records.length == 0) {\n    console.log(\"Query returned an empty result unexpectedly!\");\n    return query_response.result;\n  }\n\n  // capture the average journey amount from query response\n  const avg_amount = parseFloat(query_response.result.records[0]['avg_amount']);\n\n  // check if the avg amount value is above the threshold parameter, if true then raise alert event\n  if(avg_amount &gt; THRESHOLD) {\n\n    // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#createevent\n    const event_response = await eventsClient.createEvent({\n      // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingest\n      body : {\n        eventType: EventIngestEventType.CustomAlert, // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingesteventtype\n        title: 'EasyTravel Journey Amount [ ' + avg_amount + ' ]',\n        timeout: 5,\n        properties: {\n          'amount': avg_amount,\n          'threshold' : THRESHOLD,\n        }\n      }\n    });\n\n    // validate that the alert event was created, return the correlationId and details\n    if(event_response.eventIngestResults[0].status == \"OK\") {\n      return {\n        amount: avg_amount,\n        threshold: THRESHOLD,\n        correlationId: event_response.eventIngestResults[0].correlationId\n      }\n    } else {\n      return {\n        amount: avg_amount,\n        threshold: THRESHOLD,\n        correlationId: \"ERROR\"\n      }\n    }\n  }\n}\n</code></pre></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_wait_30_seconds</code> is <code>success</code></p> <p></p> <p>Run the workflow and validate the results</p> <p></p> <p>After validating that the workflow execution was successful and the <code>js_dql_query_alert</code> result has a populated <code>correlationId</code> value, open the Problems (or Problems (Classic)) app and view the open problem alert.</p> <p></p>"},{"location":"04_ingest_and_alert/#continue","title":"Continue","text":"<p>In the next section, we'll set up third party integration.</p> <ul> <li>Continue to Third Party Integration</li> </ul>"},{"location":"05_third_party_integration/","title":"5. Third Party Integration","text":""},{"location":"05_third_party_integration/#third-party-integration","title":"Third Party Integration","text":"<p>Goal: When a Davis problem event is triggered, send a problem summary as a Slack message to a chosen Slack channel.</p> <ul> <li>Event Trigger<ul> <li>Trigger Workflow when a Davis problem event is detected</li> <li>Events are filtered on the type of event, based on the previous exercise</li> </ul> </li> <li>Slack for Workflows<ul> <li>Third party integration is typically accomplished with Workflow Apps</li> <li>The Slack for Workflows App provides an easy-to-use mechanism for sending messages to a Slack environment containing the data and context from Dynatrace</li> <li>Leverage Jinja expressions to access Workflow action results and implement logic</li> </ul> </li> </ul>"},{"location":"05_third_party_integration/#slack-for-workflows","title":"Slack for Workflows","text":"<p>Your Dynatrace environment can integrate with a Slack workspace using Slack for Workflows. You can automate sending messages to Slack based on the events and schedules defined for your workflow.</p> <p>Slack for Workflows Documentation</p> <p>Setting up the Slack integration is straight forward and well documented.</p>"},{"location":"05_third_party_integration/#davis-problem-event-trigger","title":"Davis Problem Event Trigger","text":"<p>Begin by creating a new Workflow in the Workflows App within your Dynatrace environment.</p> <p>Remember to save progress often!</p> <p>Select a trigger: choose <code>Davis problem trigger</code></p> <p>Filter the events that will trigger this workflow.</p> <p>Event state: <pre><code>active or closed\n</code></pre></p> <p>Event category: <pre><code>Custom\n</code></pre></p> <p>Affected entities: <pre><code>include entities with all defined tagged below\n</code></pre></p> <p>Additional custom filter query: <pre><code>matchesPhrase(event.name,\"EasyTravel Journey Amount\")\n</code></pre></p> <p></p>"},{"location":"05_third_party_integration/#set-workflow-parameters","title":"Set Workflow Parameters","text":"<p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Run JavaScript</code> action type.</p> <p></p>"},{"location":"05_third_party_integration/#js_set_parameters","title":"<code>js_set_parameters</code>","text":"<p>Name: <pre><code>js_set_parameters\n</code></pre> Description: <pre><code>Set the parameters for this workflow\n</code></pre></p> <p>This will be the task/action that defines the parameters/variables that will be used by subsequent tasks and returns them in the result.  By setting the parameters as nested attribute key:value pairs within a single variable, as additional parameters are needed they can easily be added without modifying any other code.</p> <p>Set the task name and description respectively.</p> <p>Paste the following code snippet into the action <code>Input</code>: <pre><code>export default async function () {\n\n  let PARAMETERS = {\n\n    // SLACK_CHANNEL - the Slack channel name (without the #) that the Slack bot has been added to\n    SLACK_CHANNEL: \"\", // i.e. SLACK_CHANNEL: \"workflow-essentials\",\n\n  }\n\n  return PARAMETERS;\n}\n</code></pre></p> <p>Set the value of the missing variables: - SLACK_CHANNEL:     * Use the channel name you have been provided (or have created)</p> <p></p>"},{"location":"05_third_party_integration/#slack-integration","title":"Slack Integration","text":""},{"location":"05_third_party_integration/#slack_send_message","title":"<code>slack_send_message</code>","text":"<p>Name: <pre><code>slack_send_message\n</code></pre> Description: <pre><code>Send problem summary in Slack\n</code></pre></p> <p>This will be the task/action that uses the Slack connection to send a problem summary message to a Slack channel.</p> <p>Locate the <code>js_set_parameters</code> task.</p> <p>Click the <code>+</code> button to add a new action to the Workflow.</p> <p>Choose action: choose <code>Send message</code> action type from the Slack for Workflows section/app.</p> <p></p> <p>Set the task name and description respectively.</p> <p>Configure the Send message action <code>Input</code>:</p> <p>Connection: <pre><code>workflow_essentials_demo\n</code></pre> This connection was created by the Workflow Essentials - Config Generator workflow</p> <p>Channel: <pre><code>{{ result(\"js_set_parameters\")['SLACK_CHANNEL'] }}\n</code></pre></p> <p>Message: <pre><code>{\n    \"blocks\": [\n        {\n            \"type\": \"section\",\n            \"block_id\": \"sectionHeader\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \"Dynatrace :dt: Problem Detection \\n Workflow Execution: [{{ execution().id }}]\"\n            }\n        },\n        {\n            \"type\": \"divider\"\n        },\n        {\n            \"type\": \"section\",\n            \"block_id\": \"problemState\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \"Problem State: {% if event()['event.status'] == 'ACTIVE' %} :warning: OPEN :warning: {% endif %} {% if event()['event.status'] == 'CLOSED' %} :white_check_mark: RESOLVED :white_check_mark: {% endif %}\"\n            }\n        },\n        {\n            \"type\": \"divider\"\n        },\n        {\n            \"type\": \"section\",\n            \"block_id\": \"problemSummary\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \"Problem Number: [*{{ event()['display_id'] }}*] \\n Problem ID: [ {{ event()['event.id'] }} ] \\n [ {{ event()['event.name'] }} ]\"\n            }\n        },\n        {\n            \"type\": \"divider\"\n        },\n        {\n            \"type\": \"actions\",\n            \"elements\": [\n                {\n                    \"type\": \"button\",\n                    \"text\": {\n                        \"type\": \"plain_text\",\n                        \"text\": \"View Problem\",\n                        \"emoji\": true\n                    },\n                    \"value\": \"problem\",\n                    \"url\": \"{{ environment().url }}/ui/apps/dynatrace.classic.problems/#problems/problemdetails;pid={{ event()['event.id'] }}\"\n                },\n                {\n                    \"type\": \"button\",\n                    \"text\": {\n                        \"type\": \"plain_text\",\n                        \"text\": \"View Workflow Execution\",\n                        \"emoji\": true\n                    },\n                    \"value\": \"workflow\",\n                    \"url\": \"{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre></p> <p></p> <p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_set_parameters</code> is <code>success</code></p> <p>Additionally, we only want this task to run if the <code>SLACK_CHANNEL</code> parameter is defined in the previous task.  We can access the result using a Jinja expression: <pre><code>1. {{ result(\"task_name\") }}\n2. {{ result(\"task_name\")['result_attribute_name'] }}\n3. {{ result(\"task_name\")['result_attribute_name'] condition expression }}\n</code></pre></p> <p>Expression Reference Documentation</p> <p>Set the <code>And custom condition was met</code>: <pre><code>{{ result(\"js_set_parameters\")['SLACK_CHANNEL'] is defined }}\n</code></pre></p> <p></p>"},{"location":"05_third_party_integration/#trigger-workflow-execution","title":"Trigger Workflow Execution","text":"<p>Open the Workflow Essentials - Ingest and Alert workflow from the previous exercise.  Run the workflow and validate the results.  A new problem event should have been created.</p> <p></p> <p>Shortly after running the other workflow, the Workflow Essentials - Slack Integration workflow should have triggered as a result of the problem event.  Check the execution and validate the results.  Open the Slack channel and validate that the message contains the problem summary.</p> <p></p> <p>Third party integrations are available as Workflow Action Apps, which are available in the Hub.</p> <p></p>"},{"location":"05_third_party_integration/#continue","title":"Continue","text":"<p>In the next section, you'll find a Notebook with code snippets to re-use in your Workflows.</p> <ul> <li>Continue to Code Snippets</li> </ul>"},{"location":"06_code_snippets/","title":"Code Snippets","text":"<p>Code Snippets Notebook</p> <p>Workflow Essentials Code Snippets</p> <p></p>"},{"location":"06_code_snippets/#workflow-parameters-set-parameter-task","title":"Workflow Parameters: Set Parameter Task","text":"<p>The first task of a workflow should be a parameter task that defines the parameters/variables used by the remainder of tasks in the workflow.  Environment and deployment unique settings, like URLs, entities, etc. should be set as parameters in this task so that no other changes need to be made within the workflow when it is copied/cloned/moved for other uses.</p> <p>The parameters are specified in a JSON object variable and then returned during task execution to be used by remaining tasks.  Include a description/purpose for the parameter and provide an example value.</p> <pre><code>export default async function () {\n\n  let PARAMETERS = {\n    // PARAMETER - description of the parameter\n    PARAMETER: \"VALUE\", // i.e. PARAMETER: \"VALUE\" - example value of the parameter\n  }\n\n  return PARAMETERS;\n}\n</code></pre>"},{"location":"06_code_snippets/#workflow-parameters-using-parameters-from-parameter-task","title":"Workflow Parameters: Using Parameters from Parameter Task","text":"<p>Tasks executed after the parameter task can access the parameters and values from the task result.</p> <p>Within the JS code task, the <code>execution</code> class must be used from the <code>dynatrace-sdk/automation-utils</code> package.  Access the parameter from the task result and assign the value to a new variable.</p> <p>Within other task types (non JS code), the parameters can be accessed via Jinja expressions.</p> <p><code>{{ result(\"js_set_parameters\")['PARAMETER NAME'] }}</code></p> <pre><code>import { execution } from '@dynatrace-sdk/automation-utils';\n\nconst PARAMETERS_TASK = 'js_set_parameters';\n\nexport default async function ({ execution_id }) {\n\n  // get parameters from previous tasks\n  // execution\n  const ex = await execution(execution_id);\n  // parameters\n  const parameters = await ex.result(PARAMETERS_TASK);\n\n  // declare new variables to easily access the parameters within this task\n  const PARAMETER = parameters['PARAMETER'];\n\n}\n</code></pre>"},{"location":"06_code_snippets/#app-environment-utilities","title":"App Environment Utilities","text":"<p>There are app environment utilities available so that static coding of these values within the workflow are not necessary.</p> <p>https://developer.dynatrace.com/develop/sdks/app-environment/</p> <pre><code>import { getCurrentUserDetails } from '@dynatrace-sdk/app-environment';\nimport { getEnvironmentId } from '@dynatrace-sdk/app-environment';\nimport { getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\n// import all 3\nimport { getCurrentUserDetails,getEnvironmentId,getEnvironmentUrl } from '@dynatrace-sdk/app-environment';\n\nexport default async function () {\n\n  // get current workflow execution user details\n  const user_details = getCurrentUserDetails(); // returns id, name, email in JSON format\n  const user_email = user_details['email']; // get the user email address\n  const user_id = user_details['id']; // get the user id (UUID)\n  const user_name = user_details['name']; // get the user name\n\n  // get current workflow execution environment id (abc123)\n  const environment_id = getEnvironmentId();\n\n  // get current workflow execution environment URL (abc123.apps.dynatrace.com)\n  const environment_url = getEnvironmentUrl();\n\n}\n</code></pre>"},{"location":"06_code_snippets/#working-with-loop-actions","title":"Working with Loop Actions","text":"<p>Workflow actions can be configured to run as loops with an array of input data as loop items.</p> <p>In the action options, an array (typically a result from a previous task) is provided as input. A loop item variable name is also provided for accessing the array element during each loop execution.</p> <p>Within the JS code task, the <code>actionExecution</code> class must be used from the <code>dynatrace-sdk/automation-utils</code> package.</p> <p>Access the loop item from <code>actionExecution().loopItem['loop item variable name']</code>.</p> <p>Within other task types (non JS code), the parameters can be accessed via Jinja expressions.</p> <p><code>{{ _.loop item variable name }}</code></p> <pre><code>import { execution, actionExecution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id, action_execution_id }) {\n\n  // execution\n  const ex = await execution(execution_id);\n\n  // get the loop item for the action execution\n  const actionEx = await actionExecution(action_execution_id);\n  const loop_item = actionEx.loopItem['item']; // Loop item variable name from task options\n\n}\n</code></pre>"},{"location":"06_code_snippets/#timed-wait-within-workflow-and-action-execution","title":"Timed Wait within Workflow and Action Execution","text":"<p>There may be a need to perform a timed wait within the execution of a workflow or within a JS code action.  TypeScript provides the capabilities to perform a sleep for a specified amount of time.  The action and the workflow execution will be paused during this time.</p> <p>Additionally, workflow actions can be configured to 'Wait before' for a specified amount of time.  The entire workflow action will wait that amoutn of time before beginning execution.</p> <pre><code>export default async function () {\n\n  const sleep = async (waitTime: number) =&gt;\n  new Promise(resolve =&gt;\n    setTimeout(resolve, waitTime));\n\n  const waitTime = async () =&gt; {\n  // 30,000ms = 30 seconds to sleep\n  await sleep(30000);\n  console.log(\"Finished Waiting\");\n  }\n\n  console.log(\"Waiting 30 Seconds\");\n  waitTime();\n\n}\n</code></pre>"},{"location":"06_code_snippets/#getting-external-data-via-https-with-fetch","title":"Getting External Data via HTTP(S) with fetch()","text":"<p>Workflows can be used to retrieve external data from systems accessible via HTTP(S) and return JSON payloads.</p> <p>The <code>fetch()</code> API can be used to execute HTTP(S) calls and retrieve JSON responses.</p> <p>https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</p> <p>In order to access external systems, you must configure the domain in the allow list for outbound connections.</p> <p>https://developer.dynatrace.com/develop/app-functions/allow-outbound-connections/</p> <p>For HTTPS calls, the URL/domain/host must have a valid signed SSL certificate or the call will fail.  There is no way to bypass the SSL certificate check due to data privacy and security standards.</p> <pre><code>export default async function () {\n\n  // set the fetch() api parameters [method, headers, body]\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const options = {\n    method: \"GET\",\n    headers: {\n      'accept': \"application/json\",\n    }\n  };\n\n  // set the url for the fetch call\n  const url = \"http://hostname:port/uri\"\n  // make the fetch call, passing the url and options, capture the response\n  const response = await fetch(url,options);\n  // parse the json response as a new variable\n  const response_json = await response.json();\n  // return the json response\n  return response_json;\n\n}\n</code></pre>"},{"location":"06_code_snippets/#sending-data-to-external-systems-via-https-with-fetch","title":"Sending Data to External Systems via HTTP(S) with fetch()","text":"<p>Workflows can be used to send data (preferably JSON payload) to external systems accessible via HTTP(S).</p> <p>The <code>fetch()</code> API can be used to execute HTTP(S) calls and send (JSON) payloads.</p> <p>https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</p> <p>In order to access external systems, you must configure the domain in the allow list for outbound connections.</p> <p>https://developer.dynatrace.com/develop/app-functions/allow-outbound-connections/</p> <p>For HTTPS calls, the URL/domain/host must have a valid signed SSL certificate or the call will fail.  There is no way to bypass the SSL certificate check due to data privacy and security standards.</p> <pre><code>export default async function () {\n\n  // set the fetch() api parameters [method, headers, body]\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n  const json_body = {\n    key: \"value\"\n  }\n\n  const options = {\n    method: \"POST\",\n    headers: {\n      'content-type': \"application/json\",\n    },\n    body: JSON.stringify(json_body) // convert json object to json string\n  };\n\n  // set the url for the fetch call\n  const url = \"http://hostname:port/uri\"\n  // make the fetch call, passing the url and options, capture the response\n  const response = await fetch(url,options);\n  // capture the response code\n  const response_status = response.status\n\n  return response_status;\n\n}\n</code></pre>"},{"location":"06_code_snippets/#javascript-runtime-dynatrace-sdk-for-typescript","title":"JavaScript Runtime: Dynatrace SDK for TypeScript","text":"<p>The SDK for TypeScript provides a TypeScript API for Dynatrace platform services and Dynatrace AppEngine functionality.</p> <p>https://developer.dynatrace.com/develop/sdks/</p> <p>It consists of the following:</p> <ul> <li>TypeScript packages focused on specific use cases to use Dynatrace platform functionality.</li> <li>Modular clients for each Dynatrace platform service to reduce overhead on a specific use.</li> </ul>"},{"location":"06_code_snippets/#executing-dql-queries-within-js-code-actions","title":"Executing DQL Queries within JS Code Actions","text":"<p>While there is a DQL workflow action type, it may be beneficial to execute a DQL query from within a JS code action.  This can be accomplished using the <code>queryExecutionClient</code> from the <code>dynatrace-sdk/client-query</code> package.</p> <p>https://developer.dynatrace.com/develop/sdks/client-query/#queryexecute</p> <pre><code>import { queryExecutionClient } from \"@dynatrace-sdk/client-query\";\n\nexport default async function () {\n\n  // build the DQL query\n  // https://developer.dynatrace.com/develop/sdks/client-query/#queryexecute\n  const timeout = 60;\n  const query = 'timeseries metric = avg(' + metric + '), by: {dimension}, from: now()-5m\\\n                  | filter dimension == \"' + dimension + '\"\\\n                  | summarize avg = avg(arrayAvg(metric))';\n\n  const query_response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  // check if the query result is empty (unexpectedly)\n  if(query_response.result.records.length == 0) {\n    console.log(\"Query returned an empty result unexpectedly!\");\n    return query_response.result;\n  }\n\n  return query_response.result;\n\n}\n</code></pre>"},{"location":"06_code_snippets/#credential-vault-access-via-sdk","title":"Credential Vault Access via SDK","text":"<p>During workflow execution, integration with external systems may require credentials.  Those credentials should be accessed securely from the credential vault and not static coded into the workflow itself.</p> <p>Credentials can be accessed using <code>credentialVaultClient</code> from the <code>dynatrace-sdk/client-classic-environment-v2</code> package.</p> <p>When a credential is obtained, it contains the <code>token</code> value or the <code>username</code> and <code>password</code> values respectively.</p> <p>https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#getcredentialsdetails</p> <pre><code>import { credentialVaultClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function () {\n\n  // CREDENTIAL - the credential vault entity ID\n  const CREDENTIAL = \"CREDENTIALS_VAULT-ABC1235EEF8F36FD\";\n\n  // get the credentials from the credential vault using the SDK\n  // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#getcredentialsdetails\n  const data = (await credentialVaultClient.getCredentialsDetails({id: CREDENTIAL}));\n  const token = data['token'];\n  const username = data['username'];\n  const password = data['password'];\n\n}\n</code></pre>"},{"location":"06_code_snippets/#metric-ingest-via-sdk","title":"Metric Ingest via SDK","text":"<p>Data ingest is a common use case for workflows.  Logs, traces, events, and metrics can all be ingested during workflow execution.</p> <p>Metric ingestion is possible with the <code>metricsClient</code> from the <code>dynatrace-sdk/client-classic-environment-v2</code> package.</p> <p>https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#ingest-1</p> <p>The metric ingest utilizes the metric line protocol format:</p> <p>https://docs.dynatrace.com/docs/extend-dynatrace/extend-metrics/reference/metric-ingestion-protocol</p> <pre><code>import { metricsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nexport default async function () {\n\n  // build the line_protocol string to ingest the metric data point\n  const line_protocol = 'metric' + ',dimension-name=dimension-value' + ' value'; // mymetric,team=teamA,businessapp=hr 1000\n\n  // ingest the metric data point using the SDK\n  // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#ingest-1\n  const data = await metricsClient.ingest({\n    body: line_protocol,\n  });\n\n}\n</code></pre>"},{"location":"06_code_snippets/#event-ingestion-and-alerting-via-sdk","title":"Event Ingestion (and Alerting) via SDK","text":"<p>Generating alerts (events, problem events) is a common use case for workflows.</p> <p>Events can be ingested/created using the <code>eventsClient</code> from the <code>dynatrace-sdk/client-classic-environment-v2</code> package.</p> <p>https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#createevent</p> <p>There multiple event types that can be created via the <code>EventIngestEventType</code> class:</p> <p>https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingesteventtype</p> <pre><code>import { eventsClient, EventIngestEventType } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nexport default async function () {\n\n  // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#createevent\n  const event_response = await eventsClient.createEvent({\n    // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingest\n    body : {\n      eventType: EventIngestEventType.CustomAlert, // https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingesteventtype\n      title: 'Event Title',\n      timeout: 5,\n      properties: {\n        'property-1': value,\n        'property-2': 'value',\n      }\n    }\n  });\n\n}\n</code></pre>"},{"location":"06_code_snippets/#continue","title":"Continue","text":"<p>In the next section, we'll cover environment clean up.</p> <ul> <li>Continue to Clean Up</li> </ul>"},{"location":"2-getting-started/","title":"2. Getting started","text":"<p>Requirements</p> <ul> <li>A Dynatrace SaaS Tenant with DPS license (sign up here)<ul> <li>Live, Sprint, or Dev environment</li> <li>Full administrator access to the account and tenant</li> </ul> </li> </ul>"},{"location":"2-getting-started/#prerequisites","title":"Prerequisites","text":"<p>You will need full administrator access to a Dynatrace SaaS tenant with a DPS license.</p> <ul> <li>Workflow Settings - Authorization</li> <li>Slack for Workflows</li> <li>Slack Bot (Slack App within Slack Workspace)</li> <li>Config Generator</li> <li>Data Generator</li> </ul>"},{"location":"2-getting-started/#workflow-settings-authorization","title":"Workflow Settings - Authorization","text":"<p>To run a workflow with your user as the actor (this is the default on workflow creation), you need to authorize the AutomationEngine to use permissions in your name. Note: The AutomationEngine authorization only works for permissions granted to your user.</p> <p>In your Dynatrace environment, open the Workflows App.</p> <p>Validate that the following permissions are granted to workflow executions.</p> <p></p> <p>Primary permissions:</p> <p>[ x ] app-engine:apps:run - Grants permission to list and run apps and gives basic access to the Launcher</p> <p>[ x ] app-engine:functions:run - Grants permission to use the function-executor</p> <p>[ x ] app-settings:objects:read - Grants permission to read app settings objects belonging to the schema</p> <p>Secondary permissions:</p> <p>[ x ] select all</p>"},{"location":"2-getting-started/#slack-for-workflows","title":"Slack for Workflows","text":"<p>In your Dynatrace environment, search, locate, and open the Hub App.</p> <p>Search for the App <code>Slack</code> and click on it.  Note, it used to be called <code>Slack for Workflows</code>.</p> <p></p> <p>Click on Install to install the App into your environment.</p> <p>Close any notification prompts if necessary.</p> <p>Validate that the App was installed into your environment.</p> <p></p>"},{"location":"2-getting-started/#slack-bot-slack-app-within-slack-workspace","title":"Slack Bot (Slack App within Slack Workspace)","text":"<p>This lab requires a Slack App within a Slack Workspace.  In order to use the Slack App, you'll need a Slack OAuth token in the format <code>xoxb-</code>.</p> <p>If you already have the token, you will provide it in the next step (Config Generator).</p> <p>If you do not already have a Slack App and token, follow the documentation steps to create one.</p> <p>Slack App Documentation</p>"},{"location":"2-getting-started/#config-generator","title":"Config Generator","text":"<p>In your Dynatrace environment, open the Workflows App.</p> <p>Import the workflow 'Workflow Essentials - Config Generator' using the source file Workflow Essentials - Config Generator</p> <p>Workflows are imported using the Upload button.</p> <p></p> <p>Locate the <code>js_set_parameters</code> task.  Locate the code snippet for the Slack connection.</p> <p>Set the <code>CONNECTION_TOKEN</code> value to the Slack App Bot User Token you have been provided (or have created).</p> <p></p> <p>Run the workflow and validate that it runs successfully.</p> <p></p> <p>As a result of the workflow, three configurations have been made to the Dynatrace environment:</p> <ol> <li>A credential vault entry has been added containing a Dynatrace API token<ul> <li>Copy the credential vault ID from the result of the <code>js_create_credential</code> task and store it in your notes somewhere, it is needed in a future exercise</li> </ul> </li> <li>The allow list for outbound connections has been updated with the hosts/domains required for this lab<ul> <li>No action required, simply verify using screenshot below</li> </ul> </li> <li>A Slack Connection has been created called <code>workflow_essentials_demo</code><ul> <li>No action required, simply verify using screenshot below</li> </ul> </li> </ol> <p></p>"},{"location":"2-getting-started/#data-generator","title":"Data Generator","text":"<p>In your Dynatrace environment, open the Workflows App.</p> <p>Import the workflow 'Workflow Essentials - Data Generator' using the source file Workflow Essentials - Data Generator</p> <p>Workflows are imported using the Upload button.</p> <p></p> <p>No changes are required.  The workflow is scheduled to run every 5 minutes.</p> <p></p> <p>This workflow will generate bizevents representing a multi-stage business process.  This data will be used by the other workflows in the lab, removing the requirement to deploy OneAgents or ingest data through other mechanisms.</p> <p>Write BizEvents Access</p> <p>If the Workflow fails to generate BizEvents, indicated by HTTP 4XX errors in the action logs, then your account is likely missing the <code>storage:events:write</code> permission.  For more details, please see the documentation: Business Analytics API - IAM Policy</p>"},{"location":"2-getting-started/#continue","title":"Continue","text":"<p>In the next section, we'll utilize essential Workflow techniques.</p> <ul> <li>Continue to Workflow Essentials</li> </ul>"},{"location":"cleanup/","title":"7. Cleanup","text":""},{"location":"cleanup/#cleanup","title":"Cleanup","text":"<p>Disable or delete the Workflows in your tenant.</p>"},{"location":"snippets/admonitions/","title":"Admonitions","text":"<p>Note</p> <p>This is a Note </p> <p>Abstract</p> <p>This is an abstract</p> <p>Tipp</p> <p>This is a tipp </p> <p>Success</p> <p>This is a success </p> <p>Question</p> <p>This is a success </p> <p>Failure</p> <p>This is a failure </p> <p>Danger</p> <p>This is a danger </p> <p>Info</p> <p>This is a info</p> <p>Warning</p> <p>This is a Warning </p> <p>This is an Example admonition</p> <p>This is an example</p> This is a bug and is collapsable <p>This is a bug</p>"},{"location":"snippets/disclaimer/","title":"Disclaimer","text":"<p>Support Policy</p> <p>This is an enablement project created by the Center of Excellence - Enablement Team at Dynatrace.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"snippets/dt-enablement/","title":"Dt enablement","text":"<p>This Codespace leverages the Dynatrace Enablement Framework, providing a robust and flexible development environment. Key features include:</p> <ul> <li>Seamless operation within GitHub Codespaces, as a remote container, or locally via Docker.</li> <li>Cross-compilation support for both AMD and ARM architectures, ensuring broad compatibility.</li> <li>Adherence to industry standards and best practices to optimize the developer experience.</li> </ul> <p>To learn more about the Dynatrace Enablement Framework and how it can enhance your development workflow, please refer to the official documentation</p>"},{"location":"snippets/requirements/","title":"Requirements","text":"<p>Requirements</p> <ul> <li>A Dynatrace SaaS Tenant with DPS license (sign up here)<ul> <li>Live, Sprint, or Dev environment</li> <li>Full administrator access to the account and tenant</li> </ul> </li> </ul>"},{"location":"snippets/view-code/","title":"View code","text":"<p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p>"}]}